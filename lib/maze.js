// Generated by CoffeeScript 1.10.0
(function() {
  var MazeManager;

  MazeManager = function(context, maze) {
    this.context = context;
    this.width = maze.width;
    this.height = maze.height;
    this.start = maze.start;
    this.end = maze.end;
    return this.maze = maze.map;
  };

  MazeManager.prototype.draw = function() {
    var i, ref, results, x, y;
    results = [];
    for (y = i = 0, ref = this.height - 1; 0 <= ref ? i <= ref : i >= ref; y = 0 <= ref ? ++i : --i) {
      results.push((function() {
        var j, ref1, results1;
        results1 = [];
        for (x = j = 0, ref1 = this.width - 1; 0 <= ref1 ? j <= ref1 : j >= ref1; x = 0 <= ref1 ? ++j : --j) {
          if (this.isWall(x, y)) {
            this.context.fillStyle = Constant.WALL_COLOR;
            results1.push(this.context.fillRect(x * Constant.SQUARE, y * Constant.SQUARE, Constant.SQUARE, Constant.SQUARE));
          } else if (this.isInside(x, y)) {
            this.context.fillStyle = Constant.FLOOR_COLOR;
            results1.push(this.context.fillRect(x * Constant.SQUARE, y * Constant.SQUARE, Constant.SQUARE, Constant.SQUARE));
          } else {
            results1.push(void 0);
          }
        }
        return results1;
      }).call(this));
    }
    return results;
  };

  MazeManager.prototype.isWall = function(x, y) {
    return x < 0 || y < 0 || this.maze[x + (y * this.width)] === '*';
  };

  MazeManager.prototype.isInside = function(x, y) {
    return x > 0 && y > 0 && x < this.width - 1 && y < this.height - 1;
  };

  MazeManager.prototype.isOpen = function(x, y) {
    return !this.isWall(x, y);
  };

  this.window.MazeManager = MazeManager;

}).call(this);

//# sourceMappingURL=maze.js.map
